[versions]
agp = "8.10.0"
core = "1.6.1"
junitVersion = "1.2.1"
kotlin = "2.1.21"

tensorflow-android = "1.3.0"
qnn = "2.29.0"

moko-resources = "0.24.5"

detekt = "1.23.7"

publishing = "0.32.0"

startup = "1.2.0"

# Tests
junit = "4.13.2"
androidx-test-core = "1.6.1"
androidx-test-junit = "1.2.1"
androidx-test-runner = "1.6.2"

# Samples
android-compileSdk = "35"
android-minSdk = "26"

compose = "1.8.1"
activity-compose = "1.10.1"

coroutines = "1.10.2"
decompose = "3.3.0"
koin = "4.0.2"
kermit = "2.0.5"
serialization = "1.8.1"
essenty = "2.5.0"

# KTensorFlow
ktensorflow = "0.2"

[libraries]
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }

tensorflow = { module = "com.google.ai.edge.litert:litert", version.ref = "tensorflow-android" }
tensorflow-gpu = { module = "com.google.ai.edge.litert:litert-gpu", version.ref = "tensorflow-android" }
tensorflow-gpu-api = { module = "com.google.ai.edge.litert:litert-gpu-api", version.ref = "tensorflow-android" }
qnn-runtime = { module = "com.qualcomm.qti:qnn-runtime", version.ref = "qnn" }
qnn-litert-delegate = { module = "com.qualcomm.qti:qnn-litert-delegate", version.ref = "qnn" }

moko-resources = { module = "dev.icerock.moko:resources", version.ref = "moko-resources" }
moko-resources-compose = { module = "dev.icerock.moko:resources-compose", version.ref = "moko-resources" }

detekt-formatting = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }

androidx-startup-runtime = { module = "androidx.startup:startup-runtime", version.ref = "startup" }

# Tests
junit = { module = "junit:junit", version.ref = "junit" }
androidx-test-core = { module = "androidx.test:core", version.ref = "androidx-test-core" }
androidx-test-junit = { module = "androidx.test.ext:junit", version.ref = "androidx-test-junit" }
androidx-test-runner = { module = "androidx.test:runner", version.ref = "androidx-test-runner" }

# Samples
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "activity-compose" }

coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }

decompose-core = { module = "com.arkivanov.decompose:decompose", version.ref = "decompose" }
decompose-compose = { module = "com.arkivanov.decompose:extensions-compose", version.ref = "decompose" }
essenty-lifecycle = { group = "com.arkivanov.essenty", name = "lifecycle", version.ref = "essenty" }

koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }

kermit-logger = { module = "co.touchlab:kermit", version.ref = "kermit" }

serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref="serialization" }

# Plugins
kotlin-multiplatform-gradle-plugin = { module = "org.jetbrains.kotlin.multiplatform:org.jetbrains.kotlin.multiplatform.gradle.plugin", version.ref="kotlin" }
cocoapods-gradle-plugin = { module = "org.jetbrains.kotlin.native.cocoapods:org.jetbrains.kotlin.native.cocoapods.gradle.plugin", version.ref = "kotlin" }

detekt-gradle-plugin = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }

publishing-gradle-plugin = { module = "com.vanniktech.maven.publish:com.vanniktech.maven.publish.gradle.plugin", version.ref = "publishing" }

# KTensorFlow
ktensorflow-core = { module = "dev.kursor.ktensorflow:ktensorflow-core", version.ref="ktensorflow" }
ktensorflow-moko = { module = "dev.kursor.ktensorflow:ktensorflow-moko", version.ref="ktensorflow" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
android-library = { id = "com.android.library", version.ref = "agp" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-cocoapods = { id = "org.jetbrains.kotlin.native.cocoapods", version.ref = "kotlin" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
compose-multiplatform = { id = "org.jetbrains.compose", version.ref = "compose" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }

moko-resources = { id = "dev.icerock.mobile.multiplatform-resources", version.ref = "moko-resources" }

detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }

ktensorflow-link = { id = "dev.kursor.ktensorflow.link", version.ref="ktensorflow" }

publishing = { id = "com.vanniktech.maven.publish", version.ref = "publishing" }

# Convention plugins
convention-detekt = { id = "convention.detekt" }
convention-publishing = { id = "convention.publishing" }
